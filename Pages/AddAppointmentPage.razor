@using Radzen.Blazor.Rendering
@using SmartSwitchWeb.Data
@using System.Globalization
@inject DialogService DialogService
@inject IWebSocketClientHandler _clientHandler
@using Microsoft.AspNetCore.SignalR.Client
@using SmartSwitchWeb.Database
@using SmartSwitchWeb.Handlers

<RadzenTemplateForm TItem="WorkLoadEvent" Data="@model" Submit=@OnSubmit>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Text" />
        </div>
        <div class="col">
            <RadzenTextBox @bind-Value="@model.Text" Name="Text" />
            <RadzenRequiredValidator Text="Title is required" Component="Text" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Gerät" />
        </div>
        <div class="col">
             <RadzenDropDown AllowClear="true" TValue="string" Class="w-100" Name="Device" 
                            Data=@(_deviceList.Select(d => new { Name = d.Name, Guid = d.Guid} ).Distinct()) TextProperty="Name" ValueProperty="Guid" />
            <RadzenRequiredValidator Text="Title is required" Component="Text" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Benötigte MW" />
        </div>
        <div class="col">
            <RadzenNumeric  @bind-Value="@model.MW" Name="MW" />
            <RadzenRequiredValidator Text="MW is required" Component="MW" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Start" />
        </div>
        <div class="col">
            <RadzenDatePicker @bind-Value="@model.Start" Name="Start" ShowTime="true" />
            <RadzenRequiredValidator Text="Start is required" Component="Start" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="End" />
        </div>
        <div class="col">
            <RadzenDatePicker Name="End" @bind-Value="@model.End" ShowTime="true" />
            <RadzenRequiredValidator Component="End" Text="End is required" />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px">
        <div class="col-md-3">
            <RadzenLabel Text="Wiederholen" />
        </div>
        <div class="col">
            <RadzenSwitch @bind-Value=@_isReccuring Change=@(args => OnChange(args, "Switch")) />
        </div>
    </div>
    <div class="row" style="margin-bottom: 16px" hidden=@_isReccuringInverted>
        <div class="col">
            <RadzenTabs style="height: 504px; margin: 20px auto;" RenderMode="TabRenderMode.Client" @bind-SelectedIndex=@selectedIndex>
                <Tabs>
                    <RadzenTabsItem Text="Täglich">
                        <div>
                            Jede(n) <RadzenNumeric TValue="int" Min="1" DisplayName="DayInput" @bind-Value=@Interval /> Tag(e)
                        </div>
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Wöchentlich">
                        <div>
                            Jede <InputNumber DisplayName="DayInput" @bind-Value=@Interval ></InputNumber> Woche wiederholen am:
                             <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@weekDaysSelected Multiple="true" Placeholder="Select..." Data=@weekDays Class="w-100" />
                        </div>    
                    </RadzenTabsItem>
                    <RadzenTabsItem Text="Monatlich">
                      <div>
                          Monate <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@monthSelected Multiple="true" Placeholder="Select..." Data=@month Class="w-100" />
                          Tage <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                            @bind-Value=@monthDaysSelected Multiple="true" Placeholder="Select..." Data=@monthDays Class="w-100" />
                      </div>
                    </RadzenTabsItem>
                </Tabs>
            </RadzenTabs>
        </div>
    </div>
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col">
            <RadzenButton ButtonType="ButtonType.Submit" Text="Save" />
        </div>
    </div>
</RadzenTemplateForm>
@code {
    [Parameter]
    public DateTime Start { get; set; }

    [Parameter]
    public DateTime End { get; set; }
    int selectedIndex = 0;
    int Interval = 1;
    IEnumerable<string> weekDays = DateTimeFormatInfo.CurrentInfo.DayNames;
    IEnumerable<string> month = Enumerable.Range(1, 12).Select(i => new { I = i, M = DateTimeFormatInfo.CurrentInfo.GetMonthName(i) });
    IEnumerable<int> monthDays = Enumerable.Range(1, 31).ToArray();

    IEnumerable<string> monthSelected;
    IEnumerable<int> monthDaysSelected;
    IEnumerable<string> weekDaysSelected;
    WorkLoadEvent model = new WorkLoadEvent();
    bool _isReccuring = false;
    bool _isReccuringInverted = true;
    int _reccuringInterval = 1;

    DeviceContext context = new DeviceContext();
    private List<Device> _deviceList;
    protected override void OnInitialized()
    {
        _deviceList = context.GetAll();
    }
    protected override void OnParametersSet()
    {
        model.Start = Start;
        model.End = End;

    }
    void OnChange(bool value, string name)
    {
        _isReccuringInverted = !value;
    }

    void OnSubmit(WorkLoadEvent model)
    {
        SendWorkload(model);
        DialogService.Close(model);
    }
    void SendWorkloadDaily()
    {
        if(Interval == 1)
        {
            List<uint> days = new List<uint> { 1, 2, 3, 4,5,6,7 };
        }
    }
    void SendWorkloadWeekly()
    {
        List<ushort> _dayIndex = new List<ushort>();
        if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[0]))
        {
            _dayIndex.Add(6);
        }
        else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[1]))
        {
            _dayIndex.Add(0);
        }else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[2]))
        {
            _dayIndex.Add(1);
        }else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[3]))
        {
            _dayIndex.Add(2);
        }else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[4]))
        {
            _dayIndex.Add(3);
        }else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[5]))
        {
            _dayIndex.Add(4);
        }else if (weekDaysSelected.Contains(DateTimeFormatInfo.CurrentInfo.DayNames[6]))
        {
            _dayIndex.Add(5);
        }
        var dayFlags = (ushort)RepeatPattern.SetFlagUshort(_dayIndex);
    }
    void SendWorkloadMonthly()
    {

    }



    public async void SendWorkload(WorkLoadEvent model){
        if (_isReccuring)
        {
            /*switch (selectedIndex)
                    {
                    case  0: 
                    SendWorkloadDaily();
                    break;
                    case 1:
                    SendWorkloadWeekly();
                break;
                    case 2:
                    SendWorkloadMonthly();
                break;
                    default:
            break;}*/
    
            string description = "Bester Workload";
            List<ushort> months = new List<ushort> { 4, 2 };
            List<ushort> weekdays = new List<ushort> { 1, 2 };
            List<uint> days = new List<uint> { 1, 2, 3, 4 };
            List<uint> hours = new List<uint> { 23 };
            List<ulong> minutes = new List<ulong> { 23 };

            uint dayFlags = (uint)RepeatPattern.SetFlag(days);
            uint hourFlags = (uint)RepeatPattern.SetFlag(hours);
            ulong minuteFlags = (ulong)RepeatPattern.SetFlagUlong(minutes);

            ushort monthsFlags = ushort.MaxValue;
            ushort weekdayFlags = (ushort)RepeatPattern.SetFlagUshort(weekdays);

            RepeatPattern pattern = new RepeatPattern()
                {
                    MonthFlags = monthsFlags,
                    DayFlags = dayFlags,
                    HourFlags = hourFlags,
                    MinuteFlags = minuteFlags,
                    WeekdayFlags = weekdayFlags

                };
            Workload workload = new Workload
                {
                    Description = model.Text,
                    DurationM = model.Duration,
                    IsEnabled = true,
                    RepeatPattern = pattern,
                    ToleranceDurationM = (int)(model.End - model.Start).TotalMinutes,
                    WorkloadDefinitionId = 4,
                    WorkloadW = model.MW
                };
            List<Workload> wList = new List<Workload>();
            wList.Add(workload);
            RPIMessage msg = new RPIMessage
                {
                    ActionID = (int)RPIMessage.Action.SetWorkload,
                    Workload = wList.ToArray()

                };
            await _clientHandler.Broadcast(msg);
        }
        else {
            Workload work = new Workload
                {
                    WorkloadDefinitionId = model.MW
                };
            List<Workload> wList = new List<Workload>();
            wList.Add(work);
            RPIMessage msg = new RPIMessage
                {
                    ActionID = (int)RPIMessage.Action.DeleteWorkload,
                    Workload = wList.ToArray()
                };
                        await _clientHandler.Broadcast(msg);
        }

    }

}
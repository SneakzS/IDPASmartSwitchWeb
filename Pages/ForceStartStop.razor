@page "/start/{Guid}"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client
@using SmartSwitchWeb.Data
@using SmartSwitchWeb.Database
@using SmartSwitchWeb.Hubs
@using SmartSwitchWeb.SocketsManager
<h3>ForceStartStop</h3>
 <RadzenButton Text="Start" Click=@(args => OnForceStart(true)) Icon="power" ButtonStyle="ButtonStyle.Success" />
 <RadzenButton Text="Stop" Click=@(args => OnForceStart(false)) Icon="power_off" ButtonStyle="ButtonStyle.Warning" />
 <RadzenButton Text="Geplanter Modus" Click=@(args => OnForceStop()) Icon="check_circle" ButtonStyle="ButtonStyle.Danger" />
@code {
    [Parameter]
    public string Guid { get; set; }
    private async void OnForceStart(bool isEnabled)
    {
        var msg = new RPIMessage
            {
                ActionID = (int)RPIMessage.Action.SetFlags,
                FlagMask = (ulong)(RPIMessage.Flag.IsEnabled | RPIMessage.Flag.Enforce),
                Flags = (ulong)((isEnabled ? RPIMessage.Flag.IsEnabled : 0) | RPIMessage.Flag.Enforce),
            };
        var data = RPIMessage.Serialize(msg);
        await SocketHandler.SendMessageToAll(data);
        using(DeviceContext context = new DeviceContext())
        {
            Device device = context.GetDevice(Guid);
            if (isEnabled)
            {
                device.SetStatus(DeviceStatus.RunningManual);
            }
            else
            {
                device.SetStatus(DeviceStatus.StoppedManual);
            }

            await context.SaveChangesAsync();
        }
    }
    private async void OnForceStop()
    {
        var msg = new RPIMessage
            {
                ActionID = (int)RPIMessage.Action.SetFlags,
                FlagMask = (ulong)RPIMessage.Flag.Enforce,
                Flags = 0L
            };
        var data = RPIMessage.Serialize(msg);
        await SocketHandler.SendMessage(Guid,data);
        using(DeviceContext context = new DeviceContext())
        {
            Device device = context.GetDevice(Guid);
            device.SetStatus(DeviceStatus.Online);
            await context.SaveChangesAsync();
        }
    }

}

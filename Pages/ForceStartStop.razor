@page "/start/{Guid}"
@inject NavigationManager navigationManager
@inject IWebSocketClientHandler _clientHandler
@using Microsoft.AspNetCore.SignalR.Client
@using SmartSwitchWeb.Data
@using SmartSwitchWeb.Database
@using SmartSwitchWeb.Handlers
<h4>Bedienen</h4>
@if (Disabled)
{
    Disabled = false;
    <h3>Deaktiviert weil das Gerät Offline ist.</h3>
}

 <RadzenButton Text="Start" Click=@(args => OnForceStart(true)) Icon="power" ButtonStyle="ButtonStyle.Success" Disabled=Disabled/>
 <RadzenButton Text="Stop" Click=@(args => OnForceStart(false)) Icon="power_off" ButtonStyle="ButtonStyle.Warning" Disabled=Disabled />
 <RadzenButton Text="Geplanter Modus" Click=@(args => OnForceStop()) Icon="check_circle" ButtonStyle="ButtonStyle.Danger" Disabled=Disabled/>
@code {
    [Parameter]
    public DeviceStatus Device {get;set;}
    [Parameter]
    public string Guid { get; set; }
    [Parameter]
    public bool Disabled { get; set; } = false;
    [Parameter]
    public EventCallback<DeviceStatus> DeviceChanged { get; set; }

    async Task UpdateDevice()
    {
        await DeviceChanged.InvokeAsync(Device);
    }

    private async void OnForceStart(bool isEnabled)
    {
        var msg = new RPIMessage
            {
                ActionID = (int)RPIMessage.Action.SetFlags,
                FlagMask = (ulong)(RPIMessage.Flag.IsEnabled | RPIMessage.Flag.Enforce),
                Flags = (ulong)((isEnabled ? RPIMessage.Flag.IsEnabled : 0) | RPIMessage.Flag.Enforce),
            };
        //var data = RPIMessage.Serialize(msg);
        //await SocketHandler.SendMessageToAll(data);
        await _clientHandler.SendClientMessage(Guid, msg);

        Console.WriteLine("OnForceStart");

        using(DeviceContext context = new DeviceContext())
        {
            Device device = context.GetDevice(Guid);
            if (isEnabled)
            {
                device.SetStatus(DeviceStatus.RunningManual);
            }
            else
            {
                device.SetStatus(DeviceStatus.StoppedManual);
            }
            
            await context.SaveChangesAsync();
            await UpdateDevice();
        }
    }
    private async void OnForceStop()
    {
        var msg = new RPIMessage
            {
                ActionID = (int)RPIMessage.Action.SetFlags,
                FlagMask = (ulong)RPIMessage.Flag.Enforce,
                Flags = 0L
            };
        //var data = RPIMessage.Serialize(msg);
        //await SocketHandler.SendMessage(Guid,data);
        await _clientHandler.SendClientMessage(Guid, msg);

        Console.WriteLine("OnForceStop");

        using(DeviceContext context = new DeviceContext())
        {
            Device device = context.GetDevice(Guid);
            device.SetStatus(DeviceStatus.Online);
            await context.SaveChangesAsync();
        }
        await UpdateDevice();
    }

}


@page "/settings"
@inject NavigationManager navigationManager
@using Ical.Net.CalendarComponents
@using Microsoft.AspNetCore.SignalR.Client;
@using SmartSwitchWeb.Data
@using SmartSwitchWeb.Hubs
@using Ical.Net.DataTypes;





<h3>Settings</h3>

<button class="btn btn-primary" @onclick="Send">Click me now</button>
<form method="post">
    <div>
        <label>
            <span>
            "Frühste Startzeit":
            </span>
            <input type="datetime-local" name="startDate" required/>
        </label>
    </div>
    <div>
    <label>
        <span>
        "Fertig bis":
        </span>
        <input type="datetime-local" name="endDate" required/>
    </label>
    </div>
    <div>
    <label>
        <span>
        "Dauer in Min":
        </span>
        <input type="time" name="duration" required/>
    </label>
    </div>
    <div>
    <label>
        <span>
        "Benötigte MW":
        </span>
        <input type="number" name="mw" required />
    </label>
    </div>
    <input type="checkbox" name="test" id="name" @onchange=toggleScheduler class="form-check-input"/>
    <input type="submit" onclick="Send" />
    <div hidden="@schedulerHidden">
        <ul>
            <input type="checkbox" id="name" @bind-value=toggle class="form-check-input"/>
       </ul>
    </div>
</form>


@code {
    #pragma warning disable CS0169
    private DateTimeOffset _startTime;
    private DateTimeOffset _endTime;
    private int _durationMin;
    private int _mw;
    private bool _isOnline;
    private bool toggle { get; set; }
    bool schedulerHidden = true;
    //private List<IcalCalendar> = IcalCalendar.GetWorkloads(DateTime.Now,DateTime.Now.AddDays(5));
    private string _hubUrl;
    private HubConnection _hubConnection;
    protected  async override  Task OnInitializedAsync()
    {
        try
        {
            _isOnline = true;
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + FrontEndHub.HubUrl;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
        }

    }
    private async Task Send()
    {
        await _hubConnection.SendAsync("ForceStart", toggle);
    }
    //toggle scheduler div
    private void toggleScheduler() => schedulerHidden = !schedulerHidden;

    private int currentCount = 0;
    public void IncrementCount()
    {
        var test = IcalCalendar.GetOccurrences(DateTime.Now,DateTime.Now.AddDays(5));
        foreach (var  item in test)
        {
            CalendarEvent sourceEvent = item.Source as CalendarEvent;

            int durationMin = (int)sourceEvent.Properties.Where(i => i.Name == "X-Duration-Min").Select(x => x.Value).Single();
            int usageW = (int)sourceEvent.Properties.Where(i => i.Name == "X-Usage-W").Select(x => x.Value).Single();
        }
        currentCount++;   

    }
}


@page "/settings"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using SmartSwitchWeb.Hubs
@using SmartSwitchWeb.Services






<h3>Settings</h3>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
<form method="post">
    <div>
        <label>
            <span>
            "Frühste Startzeit":ttttttttt
            </span>
            <input type="datetime-local" name="startDate" required/>
        </label>
    </div>
    <div>
    <label>
        <span>
        "Fertig bis":
        </span>
        <input type="datetime-local" name="endDate" required/>
    </label>
    </div>
    <div>
    <label>
        <span>
        "Dauer in Min":
        </span>
        <input type="time" name="duration" required/>
    </label>
    </div>
    <div>
    <label>
        <span>
        "Benötigte MW":
        </span>
        <input type="number" name="mw" required />
    </label>
    </div>
    <input type="submit" />
</form>


@code {
    private DateTimeOffset _startTime;
    private DateTimeOffset _endTime;
    private int _durationMin;
    private int _mw;
    private bool _isOnline;

    private string _hubUrl;
    private HubConnection _hubConnection;
    public async Task Test()
    {
        try
        {
            _isOnline = true;
            await Task.Delay(1);
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + FrontEndHub.HubUrl;
            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();
            //_hubConnection.On<string, string>("Broadcast", "test");

            await _hubConnection.StartAsync();
        }
        catch (Exception e)
        {
            //_message = $"ERROR: Failed to start chat client: {e.Message}";
            //_isChatting = false;
        }

    }
    private async Task SendAsync(string message)
    {
        if (!string.IsNullOrWhiteSpace(message))
        {
            await _hubConnection.SendAsync("Broadcast", _durationMin, message);

            //_newMessage = string.Empty;
        }
    }
    private void test()
    {
        // _hubConnection.InvokeCoreAsync("SendAsync",_)
    }
    private int currentCount = 0;
    public void IncrementCount()
    {
        currentCount++;   

    }
    public void OnPost()
    {
        
    }
}

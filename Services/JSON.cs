using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Globalization;

namespace SmartSwitchWeb.Services
{
    // <auto-generated />
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = Welcome.FromJson(jsonString);

    public partial class Welcome
    {
        [JsonProperty("msgid")]
        public long Msgid { get; set; }

        [JsonProperty("data")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public long Data { get; set; }

        [JsonProperty("workload")]
        public Workload Workload { get; set; }

        [JsonProperty("isRunning")]
        [JsonConverter(typeof(FluffyParseStringConverter))]
        public bool IsRunning { get; set; }

        [JsonProperty("delWorkload")]
        [JsonConverter(typeof(PurpleParseStringConverter))]
        public int DelWorkload { get; set; }

        public Welcome(int msgid, Workload workload)
        {
            Msgid = msgid;
            Workload = workload;
        }
        public Welcome(int msgid, bool isRunning)
        {
            Msgid = msgid;
            IsRunning = isRunning;
        }
        public Welcome(int msgid, int data, Workload workload, bool isRunning, int delWorkload)
        {
            Msgid = msgid;
            Data = data;
            Workload = workload;
            IsRunning = isRunning;
            DelWorkload = delWorkload;
        }
        public Welcome(int msgid, int delWorkload)
        {
            Msgid = msgid;
            DelWorkload = delWorkload;
        }

    }

    public partial class Workload
    {
        [JsonProperty("startTime")]
        public DateTimeOffset StartTime { get; set; }

        [JsonProperty("endTime")]
        public DateTimeOffset EndTime { get; set; }

        [JsonProperty("durationMin")]
        public int DurationMin { get; set; }

        [JsonProperty("repeat")]
        public object[] Repeat { get; set; }

        [JsonProperty("workloadId")]
        public int WorkloadId { get; set; }

        public Workload(DateTimeOffset _startTime, DateTimeOffset _endTime, int _durationMin, int _workloadID)
        {
            StartTime = _startTime;
            EndTime = _endTime;
            DurationMin = _durationMin;
            WorkloadId = _workloadID;
        }
    }

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, SmartSwitchWeb.Services.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, SmartSwitchWeb.Services.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
        {
            new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
        },
        };
    }

    internal class PurpleParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly PurpleParseStringConverter Singleton = new PurpleParseStringConverter();
    }

    internal class FluffyParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(bool) || t == typeof(bool?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            bool b;
            if (Boolean.TryParse(value, out b))
            {
                return b;
            }
            throw new Exception("Cannot unmarshal type bool");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (bool)untypedValue;
            var boolString = value ? "true" : "false";
            serializer.Serialize(writer, boolString);
            return;
        }

        public static readonly FluffyParseStringConverter Singleton = new FluffyParseStringConverter();
    }
}
